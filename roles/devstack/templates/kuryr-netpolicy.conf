[[local|localrc]]

USE_PYTHON3=True
KURYR_IPV6=False
Q_PLUGIN_CONF_FILE=/etc/neutron/plugins/ml2/ml2_conf.ini

enable_plugin kuryr-kubernetes https://opendev.org/openstack/kuryr-kubernetes

# If you do not want stacking to clone new versions of the enabled services,
# like for example when you did local modifications and need to ./unstack.sh
# and ./stack.sh again, uncomment the following
RECLONE="no"

# Log settings for better readability
LOG_COLOR=False
LOGFILE=devstack.log


# Credentials
ADMIN_PASSWORD=password
DATABASE_PASSWORD=password
RABBIT_PASSWORD=password
SERVICE_PASSWORD=password
SERVICE_TOKEN=password
# Enable Keystone v3
IDENTITY_API_VERSION=3

# In pro of speed and being lightweight, we will be explicit in regards to
# which services we enable
ENABLED_SERVICES=""

#enable_service tls-proxy

# Neutron services
enable_plugin neutron https://opendev.org/openstack/neutron
enable_service q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-api
enable_service q-meta
enable_service q-svc

# Octavia LBaaSv2
LIBS_FROM_GIT+=python-octaviaclient
enable_plugin octavia https://opendev.org/openstack/octavia
enable_service octavia
enable_service o-api
enable_service o-cw
enable_service o-hm
enable_service o-hk
## Octavia Deps
### Image
### Barbican
enable_plugin barbican https://opendev.org/openstack/barbican
### Nova
enable_service n-api
enable_service n-api-meta
enable_service n-cpu
enable_service n-cond
enable_service n-sch
enable_service placement-api
enable_service placement-client
### Glance
enable_service g-api
enable_service g-reg

# Keystone
enable_service key

# dependencies
enable_service mysql
enable_service rabbit
enable_service etcd3

# By default use all the services from the kuryr-kubernetes plugin

# Docker
# ======
# If you already have docker configured, running and with its socket writable
# by the stack user, you can omit the following line.
enable_plugin devstack-plugin-container https://opendev.org/openstack/devstack-plugin-container

# We use hyperkube to run the services. You can select the hyperkube image and/
# or version by uncommenting and setting the following ENV vars different
# to the following defaults:
#KURYR_HYPERKUBE_IMAGE="gcr.io/google_containers/hyperkube-amd64"
# KURYR_HYPERKUBE_VERSION="v1.9.0"
#
# If you have the 8080 port already bound to another service, you will need to
# have kubernetes API server bind to another port. In order to do that,
# uncomment and set a different port number in:
# KURYR_K8S_API_PORT="8080"
#
# If you want to test with a different range for the Cluster IPs uncomment and
# set the following ENV var to a different CIDR
# KURYR_K8S_CLUSTER_IP_RANGE="10.0.0.0/24"
#
# If, however, you are reusing an existing deployment, you should uncomment and
# set an ENV var so that the Kubelet devstack runs can find the API server:
# KURYR_K8S_API_URL="http (or https, if K8S is SSL/TLS enabled)://k8s_api_ip:k8s_api_port"
#
# If kubernetes API server is 'https' enabled, set path of the ssl cert files
# KURYR_K8S_API_CERT="/etc/kubernetes/certs/kubecfg.crt"
# KURYR_K8S_API_KEY="/etc/kubernetes/certs/kubecfg.key"
# KURYR_K8S_API_CACERT="/etc/kubernetes/certs/ca.crt"

# You can specify a different location for the hyperkube binary that will be
# extracted from the hyperkube container into the Host filesystem:
# KURYR_HYPERKUBE_BINARY=/usr/local/bin/hyperkube
#
# NOTE: KURYR_HYPERKUBE_IMAGE, KURYR_HYPERKUBE_VERSION also affect which
# the selected binary for the Kubelet.

enable_service kuryr-kubernetes


# Kuryr Daemon
# ============
#
# Kuryr can run in daemonized way - i.e. kubelet will send requests to
# Kuryr daemon running on the node, instead of processing them on its
# own. This limits the number of processes running on the node and
# should increase scalability in environments that often delete and
# create pods. To enable kuryr-daemon uncomment next line.
enable_service kuryr-daemon


# Containerized Kuryr
# ===================
#
# Kuryr can be installed on Kubernetes as a pair of Deployment
# (kuryr-controller) and DaemonSet (kuryr-cni). If you want DevStack to deploy
# Kuryr services as pods on Kubernetes uncomment next line.
KURYR_K8S_CONTAINERIZED_DEPLOYMENT=True

IMAGE_URLS+=",http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img"

# Kubernetes
# ==========
#
# Kubernetes is run from the hyperkube docker image
# If you already have a Kubernetes deployment, you can use it instead and omit
# enabling the Kubernetes service (except Kubelet, which must be run by
# devstack so that it uses our development CNI driver.
#
# The default is, again, for devstack to run the Kubernetes services:
enable_service kubernetes-api
enable_service kubernetes-controller-manager
enable_service kubernetes-scheduler

# Kubelet
# =======
#
# Kubelet should almost invariably be run by devstack
enable_service kubelet

# OpenShift
#enable_service openshift-master openshift-node
#enable_service coredns
#enable_service openshift-dnsmasq openshift-dns
#DOCKER_CGROUP_DRIVER="systemd"
KURYR_ENABLED_HANDLERS=vif,namespace,pod_label,policy,kuryrnetwork,kuryrnetworkpolicy,kuryrport,endpoints,service,kuryrloadbalancer
KURYR_SG_DRIVER=policy
KURYR_SUBNET_DRIVER=namespace
#ETCD_USE_RAMDISK=true

# Tempest
enable_service tempest
enable_plugin kuryr-tempest-plugin https://opendev.org/openstack/kuryr-tempest-plugin

# KURYR_USE_PORTS_POOLS=True
# KURYR_VIF_POOL_DRIVER=daemon
# KURYR_DAEMON_DRIVER=pool
# KURYR_VIF_POOL_BATCH=50

#KURYR_CONTROLLER_REPLICAS=2

# Pools
#KURYR_USE_PORT_POOLS=true
#KURYR_VIF_POOL_DRIVER=neutron

# OCTAVIA_AMP_IMAGE_FILE=/tmp/test-only-amphora-x64-haproxy-ubuntu-bionic.qcow2
# OCTAVIA_AMP_IMAGE_SIZE=3
# OCTAVIA_AMP_IMAGE_NAME=test-only-amphora-x64-haproxy-ubuntu-bionic

# OCTAVIA_MGMT_SUBNET=${OCTAVIA_MGMT_SUBNET:-"192.168.1.0/24"}
# OCTAVIA_MGMT_SUBNET_START=${OCTAVIA_MGMT_SUBNET_START:-"192.168.1.2"}
# OCTAVIA_MGMT_SUBNET_END=${OCTAVIA_MGMT_SUBNET_END:-"192.168.1.200"}

# OVN
# enable_plugin networking-ovn https://git.openstack.org/openstack/networking-ovn
# enable_service ovn-northd ovn-controller networking-ovn-metadata-agent q-trunk q-svc neutron
# VAR_RUN_PATH=/usr/local/var/run
#Q_USE_PROVIDERNET_FOR_PUBLIC=true
#PHYSICAL_NETWORK=public
#OVN_L3_CREATE_PUBLIC_NETWORK=true
#Q_BUILD_OVS_FROM_GIT=false
#KURYR_NEUTRON_DEFAULT_ROUTER=kuryr-router
